x <- "aBCdefG12#"
y <- x
tolower(x)
toupper(y)
## ------------------------------------------------------------------------
moby_dick <- tolower(moby_dick)
## ------------------------------------------------------------------------
nchar("dog")
nchar(c("dog", "cat", "horse", "elephant"))
nchar(c("dog", "cat", "horse", "elephant", NA, "goat"))
nchar(c("dog", "cat", "horse", "elephant", NA, "goat"), keepNA = FALSE)
nchar(moby_dick)
## ------------------------------------------------------------------------
strsplit(c("mail.msu.edu", "mail.google.com", "www.amazon.com"),
split = ".", fixed = TRUE)
unlist(strsplit(c("mail.msu.edu", "mail.google.com", "www.amazon.com"),
split = ".", fixed = TRUE))
unlist(strsplit(c("dog", "cat", "pig", "horse"),
split = "o", fixed = TRUE))
## ------------------------------------------------------------------------
unlist(strsplit(c("dog", "cat", "pig", "horse", "rabbit"),
split = "[aeiou]"))
## ------------------------------------------------------------------------
unlist(strsplit(c("dog", "cat", "pig", "horse", "rabbit"),
split = "[aorb]"))
## ------------------------------------------------------------------------
unlist(strsplit(c("a1c2b", "bbb2bc3f"), split = "[1-9]"))
## ------------------------------------------------------------------------
unlist(strsplit(c("aBc1fGh", "1TyzaaG"), split = "[^a-z]"))
## ------------------------------------------------------------------------
unlist(strsplit(c("the rain", "in Spain stays mainly", "in", "the plain"),
split = "[^0-9A-Za-z]"))
unlist(strsplit(c("the rain", "in Spain stays mainly", "in", "the plain"),
split =" ", fixed = TRUE))
## ------------------------------------------------------------------------
moby_dick <- unlist(strsplit(moby_dick, split = "[^0-9A-Za-z]"))
## ------------------------------------------------------------------------
moby_dick[1:50]
## ------------------------------------------------------------------------
unlist(strsplit(c("the rain", "in Spain    stays mainly", "in", "the plain"), split = "[^0-9A-Za-z]"))
## ------------------------------------------------------------------------
length(moby_dick)
not.blanks <- which(moby_dick != "")
moby_dick <- moby_dick[not.blanks]
length(moby_dick)
moby_dick[1:50]
## ---- eval = FALSE-------------------------------------------------------
## moby_dick <- unlist(strsplit(moby_dick, split = "[^0-9A-Za-z]"))
## ---- eval = FALSE-------------------------------------------------------
## moby_dick2 <- unlist(strsplit(moby_dick, split = " ", fixed = TRUE))
## ------------------------------------------------------------------------
strings <- c("Once-upon", "a.time", "there", "was-a", "man.named", "Bob")
## ---- echo = FALSE, eval = FALSE-----------------------------------------
## unlist(strsplit(strings, split = '[-|.]'))
## ------------------------------------------------------------------------
moby_dick_nchar <- nchar(moby_dick)
moby_dick_nchar[1:50]
max(moby_dick_nchar)
ggplot(data = data.frame(nwords = moby_dick_nchar), aes(x = nwords)) +
geom_histogram(binwidth = 1, color = "black", fill = "white") +
ggtitle("Number of letters in words in Moby Dick") +
theme_bw()
## ------------------------------------------------------------------------
moby_dick_word_table <- table(moby_dick)
moby_dick_word_table <- sort(moby_dick_word_table, decreasing = TRUE)
moby_dick_word_table[1:50]
## ---- echo = FALSE, message = FALSE--------------------------------------
library(wordcloud)
md.data.frame <- data.frame(moby_dick_word_table)
dim(md.data.frame)
wordcloud(md.data.frame$moby_dick, md.data.frame$Freq, max.words = 500, colors = rainbow(20), random.color = TRUE)
head(md.data.frame)
md.data.frame <- as.data.frame(moby_dick_word_table)
dim(md.data.frame)
?wordcloud
dim(md.data.frame)
## ---- echo = FALSE, message = FALSE--------------------------------------
library(wordcloud)
md.data.frame <- as.data.frame(moby_dick_word_table)
wordcloud(md.data.frame$moby_dick, md.data.frame$Freq, max.words = 500, colors = rainbow(20), random.color = TRUE)
warnings()
## ---- echo = FALSE, message = FALSE--------------------------------------
library(wordcloud)
md.data.frame <- as.data.frame(moby_dick_word_table)
wordcloud(md.data.frame$moby_dick, md.data.frame$Freq, max.words = 500, colors = rainbow(20), random.color = TRUE)
## ---- echo = FALSE, message = FALSE--------------------------------------
library(wordcloud)
md.data.frame <- as.data.frame(moby_dick_word_table)
wordcloud(md.data.frame$moby_dick, md.data.frame$Freq, max.words = 500, colors = rainbow(20), random.color = TRUE)
library(shiny); runApp('ex-databases/db_app.R')
rm(list=ls())
library(rgdal)
library(sp)
library(leaflet)
library(dplyr)
huc <- readOGR("CO-wells", "CO-HUC", verbose = FALSE)
wells <- read.csv("CO-wells/CO-wells.csv", header = TRUE, stringsAsFactors = FALSE)
coordinates(wells) <- ~Longitude+Latitude
proj4string(wells) <- "+proj=longlat +datum=WGS84"
huc <- spTransform(huc, CRS(proj4string(wells)))
wells$HUC_ID <- over(wells, huc)$HUC_ID
huc.wells <- wells@data %>%
group_by(HUC_ID) %>%
summarize(total = length(Facil_Stat), active = sum(Facil_Stat %in% c("AC","PR")), inactive = sum(!Facil_Stat %in% c("AC","PR")))
huc@data <- left_join(huc@data, huc.wells, by = "HUC_ID")
huc@data <- huc@data %>%
mutate(total = ifelse(is.na(total), 0, total),
active = ifelse(is.na(active), 0, active),
inactive = ifelse(is.na(inactive), 0, inactive))
pal <- colorBin("YlOrRd", domain = huc$total, bins = 6, pretty = TRUE)
labels <- sprintf(
"<strong>HUC: %s</strong><br/>Total: %g<br/>Active: %g</br>Inactive: %g",
huc$HUC_NAME, huc$total, huc$active, huc$inactive
) %>% lapply(htmltools::HTML)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
fillColor = ~pal(total),
group = "Oil & gas wells",
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
rm(list=ls())
library(rgdal)
library(sp)
library(leaflet)
library(dplyr)
huc <- readOGR("CO-wells", "CO-HUC", verbose = FALSE)
wells <- read.csv("CO-wells/CO-wells.csv", header = TRUE, stringsAsFactors = FALSE)
coordinates(wells) <- ~Longitude+Latitude
proj4string(wells) <- "+proj=longlat +datum=WGS84"
huc <- spTransform(huc, CRS(proj4string(wells)))
wells$HUC_ID <- over(wells, huc)$HUC_ID
huc.wells <- wells@data %>%
group_by(HUC_ID) %>%
summarize(total = length(Facil_Stat), active = sum(Facil_Stat %in% c("AC","PR")), inactive = sum(!Facil_Stat %in% c("AC","PR")))
huc@data <- left_join(huc@data, huc.wells, by = "HUC_ID")
huc@data <- huc@data %>%
mutate(total = ifelse(is.na(total), 0, total),
active = ifelse(is.na(active), 0, active),
inactive = ifelse(is.na(inactive), 0, inactive))
pal <- colorBin("YlOrRd", domain = huc$total, bins = 6, pretty = TRUE)
labels <- sprintf(
"<strong>HUC: %s</strong><br/>Total: %g<br/>Active: %g</br>Inactive: %g",
huc$HUC_NAME, huc$total, huc$active, huc$inactive
) %>% lapply(htmltools::HTML)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
fillColor = ~pal(total),
group = "Oil & gas wells",
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
fillColor = ~pal(total),
group = "Oil & gas wells"
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
fillColor = ~pal(total),
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
group = "Oil & gas wells"
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
weight = 2
fillColor = ~pal(total),
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
weight = 2,
fillColor = ~pal(total),
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
group = "Oil & gas wells"
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
weight = 2,
opacity = 1,
fillColor = ~pal(total),
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
group = "Oil & gas wells"
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
weight = 2,
opacity = 1,
color = "white",
fillColor = ~pal(total),
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
group = "Oil & gas wells"
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillColor = ~pal(total),
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
group = "Oil & gas wells"
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.5,
fillColor = ~pal(total),
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.5,
bringToFront = TRUE),
group = "Oil & gas wells"
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
fillColor = ~pal(total),
group = "Oil & gas wells",
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
fillColor = ~pal(total),
group = "Oil & gas wells",
dashArray = "3"
highlight = highlightOptions(
leaflet(width = "100%") %>%
# Overlay groups and Highlight Interaction
addPolygons(
data = huc,
fillColor = ~pal(total),
group = "Oil & gas wells",
dashArray = "3",
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
) %>%
# Base groups
addProviderTiles(providers$OpenStreetMap.Mapnik, group = "OSM (default)") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Imagery") %>%
addProviderTiles(providers$Esri.WorldTopoMap, group = "Topo") %>%
# Layers control
addLayersControl(
overlayGroups = c("Oil & gas wells"),
baseGroups = c("OSM (default)", "Imagery", "Topo"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addLegend("bottomright", pal = pal, values = huc$total,
title = "Total number of gas and oil<br>wells by USGS HUC",
opacity = 0.5
)
?install.packages
?remove.packages
library(DBI)
?dbListTables
?dbConnect
library(RSQLite)
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "myDBDir")
if(length(dbListTables(con)) != 0) {
dbRemoveTable(con, "baseball")
dbRemoveTable(con, "batting")
dbRemoveTable(con, "pitching")
dbRemoveTable(con, "fielding")
}
library(Lahman)
names(Master) <- tolower(names(Master))
names(Pitching) <- tolower(names(Pitching))
names(Batting) <- tolower(names(Batting))
names(Fielding) <- tolower(names(Fielding))
library(Lahman)
str(Master)
library(shiny); runApp('ex-shiny/test.R')
runApp('ex-shiny/test.R')
runApp('ex-shiny')
runApp('ex-shiny/solutions')
runApp('ex-shiny/test.R')
runApp('ex-shiny/test.R')
runApp('ex-shiny/test.R')
library(shiny); runApp('ex-databases/db_app.R')
library(RSQLite)
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "myDBDir")
if(length(dbListTables(con)) != 0) {
dbRemoveTable(con, "baseball")
dbRemoveTable(con, "batting")
dbRemoveTable(con, "pitching")
dbRemoveTable(con, "fielding")
}
library(Lahman)
names(Master) <- tolower(names(Master))
names(Pitching) <- tolower(names(Pitching))
names(Batting) <- tolower(names(Batting))
names(Fielding) <- tolower(names(Fielding))
library(Lahman)
dbWriteTable(con, 'baseball', Master)
dbWriteTable(con, 'batting', Batting)
dbWriteTable(con, 'pitching', Pitching)
dbWriteTable(con, 'fielding', Fielding)
runApp('ex-databases/db_app.R')
shiny::runApp('ex-shiny/solutions')
shiny::runApp('ex-shiny/solutions')
runApp('ex-shiny/solutions')
