dbRemoveTable(con, "baseball")
dbRemoveTable(con, "batting")
dbRemoveTable(con, "pitching")
dbRemoveTable(con, "fielding")
library(RSQLite)
library(DBI)
dbdir <- "myDBDir"
con <- dbConnect(RSQLite::SQLite(), ":memory:")
library(Lahman)
names(Master) <- tolower(names(Master))
names(Pitching) <- tolower(names(Pitching))
names(Batting) <- tolower(names(Batting))
names(Fielding) <- tolower(names(Fielding))
library(Lahman)
dbWriteTable(con, 'baseball', Master)
dbWriteTable(con, 'batting', Batting)
dbWriteTable(con, 'batting', Batting)
dbWriteTable(con, 'fielding', Fielding)
dbListTables(con)
dbWriteTable(con, 'pitching', Pitching)
dbListTables(con)
library(dplyr)
battingTable <- tbl(con, "batting")
baseballTable <- tbl(con, "baseball")
fieldingTable <- tbl(con, "fielding")
pitchingTable <- tbl(con, "pitching")
battingTable
dbListFields(con, "batting")
library(RSQLite)
library(DBI)
con <- dbConnect(MonetDB.R::MonetDBLite(), dbdir)
con <- dbConnect(MonetDB.R::MonetDBLite(), dbdir)
library(RSQLite)
library(DBI)
con <- dbConnect(MonetDB.R::MonetDBLite(), dbdir)
con <- dbConnect(MonetDB.R::MonetDBLite(), dbdir)
con <- dbConnect(RSQLite::SQLite(), ":memory:")
if(length(dbListTables(con)) != 0) {
dbRemoveTable(con, "baseball")
dbRemoveTable(con, "batting")
dbRemoveTable(con, "pitching")
dbRemoveTable(con, "fielding")
}
library(Lahman)
names(Master) <- tolower(names(Master))
names(Pitching) <- tolower(names(Pitching))
names(Batting) <- tolower(names(Batting))
names(Fielding) <- tolower(names(Fielding))
library(Lahman)
dbWriteTable(con, 'baseball', Master)
dbWriteTable(con, 'batting', Batting)
dbWriteTable(con, 'pitching', Pitching)
dbWriteTable(con, 'fielding', Fielding)
dbListTables(con)
library(dplyr)
battingTable <- tbl(con, "batting")
baseballTable <- tbl(con, "baseball")
fieldingTable <- tbl(con, "fielding")
pitchingTable <- tbl(con, "pitching")
battingTable
dbListFields(con, "batting")
#TODO 16.1: write the dplyr query here
battingTable %>%
select(playerid, yearid, hr, rbi) %>%
filter(hr >= 40) %>%
arrange(desc(hr))
battingTable %>%
inner_join(baseballTable)
# TODO 16.2: replace playerID with namefirst and namelast using an inner join
battingTable %>%
inner_join(baseballTable) %>%
select(namefirst, namelast, yearid, hr, rbi) %>%
filter(hr >= 40) %>%
arrange(desc(hr))
# TODO 16.3: remove all records of Barry Bonds, Mark McGwire, and Sammy Sosa from the database
dbSendQuery(con, "DELETE FROM baseball WHERE playerid IN ('bondsba01', 'mcgwima01', 'sosasa01')")
dbSendQuery(con, "DELETE FROM batting WHERE playerid IN ('bondsba01', 'mcgwima01', 'sosasa01')")
dbSendQuery(con, "DELETE FROM fielding WHERE playerid IN ('bondsba01', 'mcgwima01', 'sosasa01')")
#TODO 16.4: rerun the query listing those players with greater than 40 home runs
battingTable %>%
inner_join(baseballTable) %>%
select(namefirst, namelast, yearid, hr, rbi) %>%
filter(hr >= 40) %>%
arrange(desc(hr))
#TODO 16.5: perform the update here
dbSendQuery(con, "UPDATE batting SET hr = 67 WHERE playerid = 'rodrial01' AND yearid = 2002")
library(shiny); runApp('~/Dropbox/teaching/for875/for875-19/exercises/ex-databases/db_app.R')
runApp('~/Dropbox/teaching/for875/for875-19/exercises/ex-databases/db_app.R')
dbDisconnect(con)
runApp('~/Dropbox/teaching/for875/for875-19/exercises/ex-databases/db_app.R')
con <- dbConnect(RSQLite::SQLite(), "myDBDir")
battingTable <- tbl(con, "batting")
baseballTable <- tbl(con, "baseball")
runApp('~/Dropbox/teaching/for875/for875-19/exercises/ex-databases/db_app.R')
# ui.R file
# Databases Exercises
library(shiny)
library(MonetDB.R)
library(DBI)
library(dplyr)
con <- dbConnect(RSQLite::SQLite(), ":memory:")
battingTable <- tbl(con, "batting")
baseballTable <- tbl(con, "baseball")
# Obtain the highest HR for a single season for HR slider
maxHR <- battingTable %>%
select(hr) %>%
summarize(value = max(hr)) %>%
collect()
ui <- fluidPage(
titlePanel("Baseball Statistics Search"),
sidebarLayout(
sidebarPanel(
sliderInput("rangeHR",
label = "Number of Home Runs:",
min = 0,
max = local(maxHR$value),
value = c(0, local(maxHR$value)),
step = 1),
numericInput("runInput",
label = "Minimum Number of Runs",
value = 1),
numericInput("rbiInput",
label = "Minimum Number of RBIs",
value = 1),
numericInput("yearInput",
label = "Year",
value = ''),
checkboxInput("yearCheckbox",
label = "Use all years",
value = TRUE),
submitButton("Submit")
),
mainPanel(
# Create a new row for the table
fluidRow(
DT::dataTableOutput("table")
)
)
)
)
server <- function(input, output) {
output$table <- DT::renderDataTable(DT::datatable({
dat <- battingTable %>%
inner_join(baseballTable) %>%
select(namefirst, namelast, yearid, hr, rbi, r) %>%
filter(hr >= local(input$rangeHR[1]) & hr <= local(input$rangeHR[2]) &
r >= local(input$runInput) & rbi >= local(input$rbiInput) &
(local(input$yearCheckbox) | yearid == local(input$yearInput))) %>%
arrange(desc(hr))
dat <- as.data.frame(dat)
names(dat) <- c("First Name", "Last Name", "Year", "HR", "RBI", "R")
dat
}))
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny); runApp('~/Dropbox/teaching/for875/for875-19/exercises/ex-databases/db_app.R')
library(RSQLite)
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "myDBDir")
library(RSQLite)
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "myDBDir")
con <- dbConnect(RSQLite::SQLite(), "myDBDirNEW")
if(length(dbListTables(con)) != 0) {
dbRemoveTable(con, "baseball")
dbRemoveTable(con, "batting")
dbRemoveTable(con, "pitching")
dbRemoveTable(con, "fielding")
}
library(Lahman)
names(Master) <- tolower(names(Master))
names(Pitching) <- tolower(names(Pitching))
names(Batting) <- tolower(names(Batting))
library(Lahman)
dbWriteTable(con, 'baseball', Master)
dbWriteTable(con, 'batting', Batting)
dbWriteTable(con, 'batting', Batting)
dbWriteTable(con, 'fielding', Fielding)
dbWriteTable(con, 'baseball', Master)
dbWriteTable(con, 'batting', Batting)
dbWriteTable(con, 'pitching', Pitching)
dbWriteTable(con, 'fielding', Fielding)
dbListTables(con)
library(dplyr)
battingTable <- tbl(con, "batting")
baseballTable <- tbl(con, "baseball")
fieldingTable <- tbl(con, "fielding")
pitchingTable <- tbl(con, "pitching")
battingTable
dbListFields(con, "batting")
#TODO 16.1: write the dplyr query here
battingTable %>%
select(playerid, yearid, hr, rbi) %>%
filter(hr >= 40) %>%
arrange(desc(hr))
battingTable %>%
inner_join(baseballTable)
# TODO 16.2: replace playerID with namefirst and namelast using an inner join
battingTable %>%
inner_join(baseballTable) %>%
select(namefirst, namelast, yearid, hr, rbi) %>%
filter(hr >= 40) %>%
arrange(desc(hr))
# TODO 16.3: remove all records of Barry Bonds, Mark McGwire, and Sammy Sosa from the database
dbSendQuery(con, "DELETE FROM baseball WHERE playerid IN ('bondsba01', 'mcgwima01', 'sosasa01')")
dbSendQuery(con, "DELETE FROM batting WHERE playerid IN ('bondsba01', 'mcgwima01', 'sosasa01')")
dbSendQuery(con, "DELETE FROM fielding WHERE playerid IN ('bondsba01', 'mcgwima01', 'sosasa01')")
#TODO 16.4: rerun the query listing those players with greater than 40 home runs
battingTable %>%
inner_join(baseballTable) %>%
select(namefirst, namelast, yearid, hr, rbi) %>%
filter(hr >= 40) %>%
arrange(desc(hr))
library(shiny); runApp('~/Dropbox/teaching/for875/for875-19/exercises/ex-databases/db_app.R')
runApp('~/Dropbox/teaching/for875/for875-19/exercises/ex-databases/db_app.R')
x <- seq(0, 2 * pi, .05)
library(ggplot2)
library(ggplot2)
ggplot(mapping = aes(x, sin(x))) +
geom_line()
x <- seq(0, 2 * pi, .1)
ggplot(mapping = aes(x, sin(x))) +
geom_point()
library(dplyr)
x <- seq(0, 2 * pi, .1)
altered <- 2*sin(3 * (x - 1)) + 4
graphData <- tibble(x, standard, altered)
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard, color = "sin(x)")) +
geom_point(mapping = aes(y = altered, color = "2*sin(3 * (x - 1)) + 4")) +
scale_color_manual("", breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red")) +
labs(x = "x", y ="")
library(dplyr)
x <- seq(0, 2 * pi, .1)
standard <- sin(x)
altered <- 2*sin(3 * (x - 1)) + 4
graphData <- tibble(x, standard, altered)
ggplot(data = graphData, mapping = aes(x = x)) +
geom_point(mapping = aes(y = standard, color = "sin(x)")) +
geom_point(mapping = aes(y = altered, color = "2*sin(3 * (x - 1)) + 4")) +
scale_color_manual("", breaks = c("sin(x)", "2*sin(3 * (x - 1)) + 4"),
values = c("blue", "red")) +
labs(x = "x", y ="")
library(signal)
t <- seq(0, 1, len = 100)
sig <- sin(2 * pi * t)
ggplot(mapping = aes(t, sig)) +
geom_line()
noisySig <- sin(2 * pi * t) + 0.25 * rnorm(length(t))
ggplot() +
geom_line(aes(t, noisySig), color = "red")
library(dplyr)
butterFilter <- butter(3, 0.1)
recoveredSig <- signal::filter(butterFilter, noisySig)
allSignals <- data_frame(t, sig, noisySig, recoveredSig)
ggplot(allSignals, aes(t)) +
geom_line(aes(y = sig, color = "Original")) +
geom_line(aes(y = noisySig, color = "Noisy")) +
geom_line(aes(y = recoveredSig, color = "Recovered")) +
labs(x = "Time", y = "Signal")
t <- 1:500
cleanSignal <- 50 * sin(t * 4 * pi/length(t))
noise <- 50 * 1/12 * sin(t * 4 * pi/length(t) * 12)
originalSignal <- cleanSignal + noise
ggplot() +
geom_line(aes(t, originalSignal))
lowButter <- butter(2, 1/50, type = "low")
low <- signal::filter(lowButter, originalSignal)
highButter <- butter(2, 1/25, type = "high")
high <- signal::filter(highButter, originalSignal)
signals <- data.frame(originalSignal, low, high)
ggplot(signals, aes(t)) +
geom_line(aes(y = originalSignal, color = "Original")) +
geom_line(aes(y = low, color = "Signal")) +
geom_line(aes(y = high, color = "Noise")) +
labs(x = "Time", y = "Signal")
library(seewave)
example(ftwindow)
library(seewave)
data(tico)
spectro(tico)
spectro(tico, f = 22050, wl = 1024, wn = "bartlett", ovlp = 5)
knitr::include_graphics("figures/cedarWaxwing.jpg")
library(warbleR)
cedarWax <- quer_xc(qword = "Bombycilla cedrorum",
download = FALSE)
?quer_xc
cedarWax <- querxc(qword = "Bombycilla cedrorum",
download = FALSE)
querxc(qword = "Bombycilla cedrorum",
download = FALSE)
df1 <- querxc(qword = 'Phaethornis anthophilus', download = FALSE)
cedarWax <- querxc(qword = "Bombycilla cedrorum", download = FALSE)
cedarWax <- querxc(qword = "Bombycilla garrulus", download = FALSE)
querxc(qword = 'Bombycilla cedrorum', download = FALSE)
querxc(qword = 'Phaethornis anthophilus', download = FALSE)
querxc(qword = 'Bombycilla cedrorum', download = TRUE
)
library(dplyr)
library(dplyr)
library(lme4)
library(emmeans)
library(multcomp)
dat <- read.csv("~/Downloads/brookeDat.csv") %>%
mutate(Year = factor(Year))
str(dat)
# Read in the data set
dat <- read.csv("~/Downloads/brookeDat.csv")
# Read in the data set
dat <- read.csv("~/Downloads/brookeDat.csv")
dat <- read.csv("~/Downloads/brookeDat.csv")
# Manipulating the data set
dat <- dat %>% dplyr::select(-NH4SME) %>%
mutate(Year = factor(Year)) %>%
dplyr::select(Compost, Year, EC:ClSME)
dat <- dat %>% dplyr::select(-NH4SME) %>%
mutate(Year = factor(Year)) %>%
dplyr::select(Compost, Year, EC:ClSME)
dat <- read.csv("~/Downloads/brookeDat.csv")
# Manipulating the data set
dat <- dat %>% dplyr::select(-NH4SME) %>%
mutate(Year = factor(Year)) %>%
dplyr::select(Compost, Year, EC:ClSME)
names(dat)
n.dep.vars <- ncol(dat) - 2
n.dep.vars
results <- list()
n.sig.diffs <- 0
for (i in 1:n.dep.vars) {
results[[i]] <- summary(aov(dat[, i + 2] ~ Compost, data = dat))
n.sig.diffs <- ifelse(results[[i]][[1]]$`Pr(>F)`[1] < 0.05, n.sig.diffs + 1, n.sig.diffs)
names(results)[i] <- names(dat)[i + 2]
}
# Display the ANOVA tables for each ANOVA test.
results
n.sig.diffs
results <- list()
n.sig.diffs <- 0
for (i in 1:n.dep.vars) {
results[[i]] <- summary(aov(dat[, i + 2] ~ Compost, data = dat))
n.sig.diffs <- ifelse(results[[i]][[1]]$`Pr(>F)`[1] < 0.1, n.sig.diffs + 1, n.sig.diffs)
names(results)[i] <- names(dat)[i + 2]
}
results
n.sig.diffs
results <- list()
n.sig.diffs <- 0
for (i in 1:n.dep.vars) {
results[[i]] <- summary(aov(dat[, i + 2] ~ Compost, data = dat))
n.sig.diffs <- ifelse(results[[i]][[1]]$`Pr(>F)`[1] < 0.05, n.sig.diffs + 1, n.sig.diffs)
names(results)[i] <- names(dat)[i + 2]
}
# Display the ANOVA tables for each ANOVA test.
results
n.sig.diffs
library(dplyr)
library(lme4)
library(lmerTest)
library(ggbiplot)
library(emmeans)
library(multcomp)
# Read in the data set
dat <- read.csv("~/Downloads/brookeDat.csv")
# Manipulating the data set
dat <- dat %>% dplyr::select(-NH4SME) %>%
mutate(Year = factor(Year)) %>%
dplyr::select(Compost, Year, EC:ClSME)
n.dep.vars <- ncol(dat) - 2
# Run ANOVA for each group and count up how many significant results there are
results <- list()
n.sig.diffs <- 0
for (i in 1:n.dep.vars) {
results[[i]] <- summary(aov(dat[, i + 2] ~ Compost, data = dat))
n.sig.diffs <- ifelse(results[[i]][[1]]$`Pr(>F)`[1] < 0.05, n.sig.diffs + 1, n.sig.diffs)
names(results)[i] <- names(dat)[i + 2]
}
library(dplyr)
library(lme4)
library(lmerTest)
library(ggbiplot)
library(emmeans)
library(multcomp)
# Read in the data set
dat <- read.csv("~/Downloads/brookeDat.csv")
# Manipulating the data set
dat <- dat %>% dplyr::select(-NH4SME) %>%
mutate(Year = factor(Year)) %>%
dplyr::select(Compost, Year, EC:ClSME)
n.dep.vars <- ncol(dat) - 2
# Run ANOVA for each group and count up how many significant results there are
results <- list()
n.sig.diffs <- 0
for (i in 1:n.dep.vars) {
results[[i]] <- summary(aov(dat[, i + 2] ~ Compost, data = dat))
n.sig.diffs <- ifelse(results[[i]][[1]]$`Pr(>F)`[1] < 0.05, n.sig.diffs + 1, n.sig.diffs)
names(results)[i] <- names(dat)[i + 2]
}
results
n.sig.diffs
## ------------------------------------------------------------------------
out.bulk.density <- aov(BulkDensity ~ Compost, data = dat)
summary(out.bulk.density)
TukeyHSD(out.bulk.density)
dat %>%
dplyr::group_by(Compost) %>%
dplyr::summarize(mean.vals = mean(BulkDensity),
se.vals = sd(BulkDensity) / sqrt(n())) %>%
ggplot(aes(x = Compost, y = mean.vals, color = Compost, shape = Compost)) +
geom_bar(stat = 'identity', aes(fill = Compost)) +
geom_segment(aes(x = Compost, y = mean.vals - se.vals, xend = Compost, yend = mean.vals + se.vals)) +
annotate("text", x = 1, y = 0.4, label = 'AB') +
annotate("text", x = 2, y = 0.36, label = 'A') +
annotate("text", x = 3, y = 0.35, label = 'A') +
annotate("text", x = 4, y = 0.42, label = 'B') +
theme_classic() +
labs(title = 'BulkDensity', y = "Mean Bulk Density")
cld(out.bulk.density)
?cld
amod <- aov(breaks ~ tension, data = warpbreaks)
### specify all pair-wise comparisons among levels of variable "tension"
tuk <- glht(amod, linfct = mcp(tension = "Tukey"))
### extract information
tuk.cld <- cld(tuk)
tuk.cld
glht(out.bulk.density, linfct = mcp(tension = 'Tukey'))
glht(out.bulk.density, Compost = mcp(tension = 'Tukey'))
tuk.cld <- glht(out.bulk.density, Compost = mcp(tension = 'Tukey'))
cld(tuk.cld)
tuk.cld <- glht(out.bulk.density, Compost = mcp(tension = 'Tukey'))
tuk.cld
data(warpbreaks)
amod <- aov(breaks ~ tension, data = warpbreaks)
### specify all pair-wise comparisons among levels of variable "tension"
tuk <- glht(amod, linfct = mcp(tension = "Tukey"))
### extract information
tuk.cld <- cld(tuk)
tuk.cld
tuk
glht(out.bulk.density, Compost = mcp(tension = 'Tukey'))
cld(glht(out.bulk.density, Compost = mcp(tension = 'Tukey')))
dat %>%
dplyr::group_by(Compost) %>%
dplyr::summarize(mean.vals = mean(BulkDensity),
se.vals = sd(BulkDensity) / sqrt(n())) %>%
ggplot(aes(x = Compost, y = mean.vals, color = Compost, shape = Compost)) +
geom_bar(stat = 'identity', aes(fill = Compost)) +
geom_segment(aes(x = Compost, y = mean.vals - se.vals, xend = Compost, yend = mean.vals + se.vals)) +
annotate("text", x = 1, y = 0.4, label = 'AB') +
annotate("text", x = 2, y = 0.36, label = 'A') +
annotate("text", x = 3, y = 0.35, label = 'A') +
annotate("text", x = 4, y = 0.42, label = 'B') +
theme_classic() +
labs(title = 'BulkDensity', y = "Mean Bulk Density")
dat %>%
dplyr::group_by(Compost) %>%
dplyr::summarize(mean.vals = mean(BulkDensity),
se.vals = sd(BulkDensity) / sqrt(n())) %>%
ggplot(aes(x = Compost, y = mean.vals, color = Compost, shape = Compost)) +
geom_bar(stat = 'identity', aes(fill = Compost)) +
geom_segment(aes(x = Compost, y = mean.vals - se.vals, xend = Compost, yend = mean.vals + se.vals)) +
annotate("text", x = 1, y = 0.4, label = 'AB') +
annotate("text", x = 2, y = 0.36, label = 'A') +
annotate("text", x = 3, y = 0.35, label = 'A') +
annotate("text", x = 4, y = 0.42, label = 'B') +
theme_classic() +
labs(title = 'BulkDensity', y = "Mean Bulk Density")
dat %>%
dplyr::group_by(Compost) %>%
dplyr::summarize(mean.vals = mean(BulkDensity),
se.vals = sd(BulkDensity) / sqrt(n())) %>%
ggplot(aes(x = Compost, y = mean.vals, color = Compost, shape = Compost)) +
geom_bar(stat = 'identity', aes(fill = Compost)) +
geom_segment(aes(x = Compost, y = mean.vals - se.vals, xend = Compost, yend = mean.vals + se.vals)) +
theme_classic() +
labs(title = 'BulkDensity', y = "Mean Bulk Density")
library(ggplot2)
dat %>%
dplyr::group_by(Compost) %>%
dplyr::summarize(mean.vals = mean(BulkDensity),
se.vals = sd(BulkDensity) / sqrt(n())) %>%
ggplot(aes(x = Compost, y = mean.vals, color = Compost, shape = Compost)) +
geom_bar(stat = 'identity', aes(fill = Compost)) +
geom_segment(aes(x = Compost, y = mean.vals - se.vals, xend = Compost, yend = mean.vals + se.vals)) +
theme_classic() +
labs(title = 'BulkDensity', y = "Mean Bulk Density")
out.bulk.density <- aov(BulkDensity ~ Compost, data = dat)
summary(out.bulk.density)
TukeyHSD(out.bulk.density)
dat %>%
dplyr::group_by(Compost) %>%
dplyr::summarize(mean.vals = mean(BulkDensity),
se.vals = sd(BulkDensity) / sqrt(n())) %>%
ggplot(aes(x = Compost, y = mean.vals, color = Compost, shape = Compost)) +
geom_bar(stat = 'identity', aes(fill = Compost)) +
geom_segment(aes(x = Compost, y = mean.vals - se.vals, xend = Compost, yend = mean.vals + se.vals)) +
theme_classic() +
labs(title = 'BulkDensity', y = "Mean Bulk Density")
dat %>%
dplyr::group_by(Compost) %>%
dplyr::summarize(mean.vals = mean(BulkDensity),
se.vals = sd(BulkDensity) / sqrt(n()))
dat %>%
dplyr::group_by(Compost) %>%
dplyr::summarize(mean.vals = mean(BulkDensity),
se.vals = sd(BulkDensity , na.rm = TRUE) / sqrt(n())) %>%
ggplot(aes(x = Compost, y = mean.vals, color = Compost, shape = Compost)) +
geom_bar(stat = 'identity', aes(fill = Compost)) +
geom_segment(aes(x = Compost, y = mean.vals - se.vals, xend = Compost, yend = mean.vals + se.vals)) +
theme_classic() +
labs(title = 'BulkDensity', y = "Mean Bulk Density")
